{
	"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/fluid_condition.json",
	"title": "Fluid Condition Type",
	"description": "Fluid Condition Types operate on a FluidState, essentially which fluid (if any) exists, as well as properties of the fluid. These are available to power/condition types that provides a fluid_condition object field.",
	"markdownDescription": "## Fluid Condition Type\nFluid Condition Types operate on a FluidState, essentially which fluid (if any) exists, as well as properties of the fluid. These are available to power/condition types that provides a fluid_condition object field.\n\n[Fluid Condition Types Documentation](https://origins.readthedocs.io/en/latest/types/fluid_Condition_types/)",
	"type": "object",
	"required": [
		"type"
	],
	"properties": {
		"type": {
			"$ref": "./types/identifier.json"
		}
	},
	"if": {
		"required": [
			"type"
		]
	},
	"then": {
		"properties": {
			"inverted": {
				"description": "If true, the condition acts inverted.",
				"type": "boolean",
				"default": false
			}
		},
		"allOf": [
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:empty",
								"origins:empty"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/fluid_conditions/empty.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:in_tag",
								"origins:in_tag"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/fluid_conditions/in_tag.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:still",
								"origins:still"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/fluid_conditions/still.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:and",
								"origins:and"
							]
						}
					}
				},
				"then": {
					"$DONT_EXPORT": true,
					"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/apoli/meta_conditions/and.json",
					"type": "object",
					"required": [
						"type",
						"conditions"
					],
					"properties": {
						"type": {
							"description": "apoli:and\nChecks whether all of the provided conditions are fulfilled.\nFluid Condition Types operate on a FluidState, essentially which fluid (if any) exists, as well as properties of the fluid. These are available to power/condition types that provides a fluid_condition object field.",
							"markdownDescription": "### `apoli:and`\nChecks whether all of the provided conditions are fulfilled.\n## Fluid Condition Type\nFluid Condition Types operate on a FluidState, essentially which fluid (if any) exists, as well as properties of the fluid. These are available to power/condition types that provides a fluid_condition object field.\n\n[Fluid Condition Types Documentation](https://origins.readthedocs.io/en/latest/types/fluid_Condition_types/)",
							"$ignoreInvalidRef": true,
							"enum": [
								"apoli:and",
								"origins:and"
							]
						},
						"conditions": {
							"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.",
							"type": "array",
							"items": {
								"$ref": "./fluid_condition.json"
							}
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:constant",
								"origins:constant"
							]
						}
					}
				},
				"then": {
					"$DONT_EXPORT": true,
					"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/apoli/meta_conditions/constant.json",
					"type": "object",
					"required": [
						"type",
						"value"
					],
					"properties": {
						"type": {
							"description": "apoli:constant\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\nFluid Condition Types operate on a FluidState, essentially which fluid (if any) exists, as well as properties of the fluid. These are available to power/condition types that provides a fluid_condition object field.",
							"markdownDescription": "### `apoli:constant`\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\n## Fluid Condition Type\nFluid Condition Types operate on a FluidState, essentially which fluid (if any) exists, as well as properties of the fluid. These are available to power/condition types that provides a fluid_condition object field.\n\n[Fluid Condition Types Documentation](https://origins.readthedocs.io/en/latest/types/fluid_Condition_types/)",
							"$ignoreInvalidRef": true,
							"enum": [
								"apoli:constant",
								"origins:constant"
							]
						},
						"value": {
							"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.",
							"type": "boolean"
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:or",
								"origins:or"
							]
						}
					}
				},
				"then": {
					"$DONT_EXPORT": true,
					"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/apoli/meta_conditions/or.json",
					"type": "object",
					"required": [
						"type",
						"conditions"
					],
					"properties": {
						"type": {
							"description": "apoli:or\nChecks whether any (one or more) of the provided conditions are fulfilled.\nFluid Condition Types operate on a FluidState, essentially which fluid (if any) exists, as well as properties of the fluid. These are available to power/condition types that provides a fluid_condition object field.",
							"markdownDescription": "### `apoli:or`\nChecks whether any (one or more) of the provided conditions are fulfilled.\n## Fluid Condition Type\nFluid Condition Types operate on a FluidState, essentially which fluid (if any) exists, as well as properties of the fluid. These are available to power/condition types that provides a fluid_condition object field.\n\n[Fluid Condition Types Documentation](https://origins.readthedocs.io/en/latest/types/fluid_Condition_types/)",
							"$ignoreInvalidRef": true,
							"enum": [
								"apoli:or",
								"origins:or"
							]
						},
						"conditions": {
							"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.",
							"type": "array",
							"items": {
								"$ref": "./fluid_condition.json"
							}
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"const": "eggolib:chance"
						}
					}
				},
				"then": {
					"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/eggolib/meta_conditions/chance.json",
					"type": "object",
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"description": "eggolib:chance\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\neggolib:chance\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\neggolib:chance\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\neggolib:chance\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\n$parentDescription",
							"markdownDescription": "### `eggolib:chance`\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\nundefined",
							"$ignoreInvalidRef": true,
							"const": "eggolib:chance"
						},
						"chance": {
							"description": "The value to compare the generated random value to.",
							"type": "number"
						}
					},
					"dependantSchemas": {
						"type": {
							"required": [
								"chance"
							]
						}
					}
				}
			}
		]
	}
}
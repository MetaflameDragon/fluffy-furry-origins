{
	"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/entity_condition.json",
	"title": "Entity Condition Type",
	"description": "Entity Condition Types operate on an Entity, which also allows access to the world. These are available to be used in most powers in the condition object field (or entity_condition in other power/condition types), which restricts when a power is active.",
	"markdownDescription": "## Entity Condition Type\nEntity Condition Types operate on an Entity, which also allows access to the world. These are available to be used in most powers in the condition object field (or entity_condition in other power/condition types), which restricts when a power is active.\n\n[Entity Condition Types Documentation](https://origins.readthedocs.io/en/latest/types/entity_Condition_types/)",
	"type": "object",
	"required": [
		"type"
	],
	"properties": {
		"type": {
			"$ref": "./types/identifier.json"
		}
	},
	"if": {
		"required": [
			"type"
		]
	},
	"then": {
		"properties": {
			"inverted": {
				"description": "If true, the condition acts inverted.",
				"type": "boolean",
				"default": false
			}
		},
		"allOf": [
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:ability",
								"origins:ability"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/ability.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:advancement",
								"origins:advancement"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/advancement.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:air",
								"origins:air"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/air.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:attribute",
								"origins:attribute"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/attribute.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:biome",
								"origins:biome"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/biome.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:block_collision",
								"origins:block_collision"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/block_collision.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:block_in_radius",
								"origins:block_in_radius"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/block_in_radius.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:brightness",
								"origins:brightness"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/brightness.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:climbing",
								"origins:climbing"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/climbing.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:collided_horizontally",
								"origins:collided_horizontally"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/collided_horizontally.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:command",
								"origins:command"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/command.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:creative_flying",
								"origins:creative_flying"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/creative_flying.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:daytime",
								"origins:daytime"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/daytime.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:dimension",
								"origins:dimension"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/dimension.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:distance_from_coordinates",
								"origins:distance_from_coordinates"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/distance_from_coordinates.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:elytra_flight_possible",
								"origins:elytra_flight_possible"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/elytra_flight_possible.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:enchantment",
								"origins:enchantment"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/enchantment.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:entity_group",
								"origins:entity_group"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/entity_group.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:entity_type",
								"origins:entity_type"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/entity_type.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:equipped_item",
								"origins:equipped_item"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/equipped_item.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:exists",
								"origins:exists"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/exists.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:exposed_to_sky",
								"origins:exposed_to_sky"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/exposed_to_sky.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:exposed_to_sun",
								"origins:exposed_to_sun"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/exposed_to_sun.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:fall_distance",
								"origins:fall_distance"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/fall_distance.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:fall_flying",
								"origins:fall_flying"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/fall_flying.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:fluid_height",
								"origins:fluid_height"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/fluid_height.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:food_level",
								"origins:food_level"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/food_level.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:gamemode",
								"origins:gamemode"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/gamemode.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:health",
								"origins:health"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/health.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:invisible",
								"origins:invisible"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/invisible.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:in_block",
								"origins:in_block"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/in_block.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:in_block_anywhere",
								"origins:in_block_anywhere"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/in_block_anywhere.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:in_rain",
								"origins:in_rain"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/in_rain.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:in_tag",
								"origins:in_tag"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/in_tag.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:living",
								"origins:living"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/living.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:moving",
								"origins:moving"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/moving.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:nbt",
								"origins:nbt"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/nbt.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:on_block",
								"origins:on_block"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/on_block.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:on_fire",
								"origins:on_fire"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/on_fire.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:origin",
								"origins:origin"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/origin.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:passenger",
								"origins:passenger"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/passenger.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:passenger_recursive",
								"origins:passenger_recursive"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/passenger_recursive.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:power",
								"origins:power"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/power.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:power_active",
								"origins:power_active"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/power_active.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:power_type",
								"origins:power_type"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/power_type.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:predicate",
								"origins:predicate"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/predicate.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:raycast",
								"origins:raycast"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/raycast.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:relative_health",
								"origins:relative_health"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/relative_health.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:resource",
								"origins:resource"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/resource.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:riding",
								"origins:riding"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/riding.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:riding_recursive",
								"origins:riding_recursive"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/riding_recursive.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:riding_root",
								"origins:riding_root"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/riding_root.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:saturation_level",
								"origins:saturation_level"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/saturation_level.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:scoreboard",
								"origins:scoreboard"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/scoreboard.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:sneaking",
								"origins:sneaking"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/sneaking.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:sprinting",
								"origins:sprinting"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/sprinting.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:status_effect",
								"origins:status_effect"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/status_effect.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:submerged_in",
								"origins:submerged_in"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/submerged_in.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:swimming",
								"origins:swimming"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/swimming.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:tamed",
								"origins:tamed"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/tamed.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:time_of_day",
								"origins:time_of_day"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/time_of_day.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:using_effective_tool",
								"origins:using_effective_tool"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/using_effective_tool.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:using_item",
								"origins:using_item"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/using_item.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:xp_levels",
								"origins:xp_levels"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/xp_levels.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:xp_points",
								"origins:xp_points"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/entity_conditions/xp_points.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:and",
								"origins:and"
							]
						}
					}
				},
				"then": {
					"$DONT_EXPORT": true,
					"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/apoli/meta_conditions/and.json",
					"type": "object",
					"required": [
						"type",
						"conditions"
					],
					"properties": {
						"type": {
							"description": "apoli:and\nChecks whether all of the provided conditions are fulfilled.\nEntity Condition Types operate on an Entity, which also allows access to the world. These are available to be used in most powers in the condition object field (or entity_condition in other power/condition types), which restricts when a power is active.",
							"markdownDescription": "### `apoli:and`\nChecks whether all of the provided conditions are fulfilled.\n## Entity Condition Type\nEntity Condition Types operate on an Entity, which also allows access to the world. These are available to be used in most powers in the condition object field (or entity_condition in other power/condition types), which restricts when a power is active.\n\n[Entity Condition Types Documentation](https://origins.readthedocs.io/en/latest/types/entity_Condition_types/)",
							"$ignoreInvalidRef": true,
							"enum": [
								"apoli:and",
								"origins:and"
							]
						},
						"conditions": {
							"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.",
							"type": "array",
							"items": {
								"$ref": "./entity_condition.json"
							}
						}
					}
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:constant",
								"origins:constant"
							]
						}
					}
				},
				"then": {
					"$DONT_EXPORT": true,
					"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/apoli/meta_conditions/constant.json",
					"type": "object",
					"required": [
						"type",
						"value"
					],
					"properties": {
						"type": {
							"description": "apoli:constant\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\nEntity Condition Types operate on an Entity, which also allows access to the world. These are available to be used in most powers in the condition object field (or entity_condition in other power/condition types), which restricts when a power is active.",
							"markdownDescription": "### `apoli:constant`\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\n## Entity Condition Type\nEntity Condition Types operate on an Entity, which also allows access to the world. These are available to be used in most powers in the condition object field (or entity_condition in other power/condition types), which restricts when a power is active.\n\n[Entity Condition Types Documentation](https://origins.readthedocs.io/en/latest/types/entity_Condition_types/)",
							"$ignoreInvalidRef": true,
							"enum": [
								"apoli:constant",
								"origins:constant"
							]
						},
						"value": {
							"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.",
							"type": "boolean"
						}
					}
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"enum": [
								"apoli:or",
								"origins:or"
							]
						}
					}
				},
				"then": {
					"$DONT_EXPORT": true,
					"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/apoli/meta_conditions/or.json",
					"type": "object",
					"required": [
						"type",
						"conditions"
					],
					"properties": {
						"type": {
							"description": "apoli:or\nChecks whether any (one or more) of the provided conditions are fulfilled.\nEntity Condition Types operate on an Entity, which also allows access to the world. These are available to be used in most powers in the condition object field (or entity_condition in other power/condition types), which restricts when a power is active.",
							"markdownDescription": "### `apoli:or`\nChecks whether any (one or more) of the provided conditions are fulfilled.\n## Entity Condition Type\nEntity Condition Types operate on an Entity, which also allows access to the world. These are available to be used in most powers in the condition object field (or entity_condition in other power/condition types), which restricts when a power is active.\n\n[Entity Condition Types Documentation](https://origins.readthedocs.io/en/latest/types/entity_Condition_types/)",
							"$ignoreInvalidRef": true,
							"enum": [
								"apoli:or",
								"origins:or"
							]
						},
						"conditions": {
							"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.",
							"type": "array",
							"items": {
								"$ref": "./entity_condition.json"
							}
						}
					}
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"const": "eggolib:chance"
						}
					}
				},
				"then": {
					"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/eggolib/meta_conditions/chance.json",
					"type": "object",
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"description": "eggolib:chance\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\neggolib:chance\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\neggolib:chance\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\neggolib:chance\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\n$parentDescription",
							"markdownDescription": "### `eggolib:chance`\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\nundefined",
							"$ignoreInvalidRef": true,
							"const": "eggolib:chance"
						},
						"chance": {
							"description": "The value to compare the generated random value to.",
							"type": "number"
						}
					},
					"dependantSchemas": {
						"type": {
							"required": [
								"chance"
							]
						}
					}
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"const": "eggolib:block_collision"
						}
					}
				},
				"then": {
					"$ref": "eggolib/entity_conditions/block_collision.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"const": "eggolib:breaking_block"
						}
					}
				},
				"then": {
					"$ref": "eggolib/entity_conditions/breaking_block.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"const": "eggolib:has_tag"
						}
					}
				},
				"then": {
					"$ref": "eggolib/entity_conditions/has_tag.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"const": "eggolib:inventory"
						}
					}
				},
				"then": {
					"$ref": "eggolib/entity_conditions/inventory.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"const": "eggolib:in_screen"
						}
					}
				},
				"then": {
					"$ref": "eggolib/entity_conditions/in_screen.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"const": "eggolib:permission_level"
						}
					}
				},
				"then": {
					"$ref": "eggolib/entity_conditions/permission_level.json"
				}
			},
			{
				"if": {
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"const": "eggolib:perspective"
						}
					}
				},
				"then": {
					"$ref": "eggolib/entity_conditions/perspective.json"
				}
			}
		]
	}
}
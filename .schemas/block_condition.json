{
	"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/block_condition.json",
	"title": "Block Condition Type",
	"description": "Block Condition Types operate on CachedBlockPosition, essentially a combination of World and BlockPos, which allows retrieving all necessary information about the block. These are available to power/condition types that provides a block_condition object field.",
	"markdownDescription": "## Block Condition Type\nBlock Condition Types operate on CachedBlockPosition, essentially a combination of World and BlockPos, which allows retrieving all necessary information about the block. These are available to power/condition types that provides a block_condition object field.\n\n[Block Condition Types Documentation](https://origins.readthedocs.io/en/latest/types/block_Condition_types/)",
	"type": "object",
	"required": [
		"type"
	],
	"properties": {
		"type": {
			"$ref": "./types/identifier.json"
		}
	},
	"if": {
		"required": [
			"type"
		]
	},
	"then": {
		"properties": {
			"inverted": {
				"description": "If true, the condition acts inverted.",
				"type": "boolean",
				"default": false
			}
		},
		"allOf": [
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:adjacent",
								"origins:adjacent"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/adjacent.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:attachable",
								"origins:attachable"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/attachable.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:blast_resistance",
								"origins:blast_resistance"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/blast_resistance.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:block",
								"origins:block"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/block.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:block_state",
								"origins:block_state"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/block_state.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:distance_from_coordinates",
								"origins:distance_from_coordinates"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/distance_from_coordinates.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:exposed_to_sky",
								"origins:exposed_to_sky"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/exposed_to_sky.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:fluid",
								"origins:fluid"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/fluid.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:hardness",
								"origins:hardness"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/hardness.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:height",
								"origins:height"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/height.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:in_tag",
								"origins:in_tag"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/in_tag.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:light_blocking",
								"origins:light_blocking"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/light_blocking.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:light_level",
								"origins:light_level"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/light_level.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:material",
								"origins:material"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/material.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:movement_blocking",
								"origins:movement_blocking"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/movement_blocking.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:nbt",
								"origins:nbt"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/nbt.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:offset",
								"origins:offset"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/offset.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:replacable",
								"origins:replacable"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/replacable.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:slipperiness",
								"origins:slipperiness"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/slipperiness.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:waterloggable",
								"origins:waterloggable"
							]
						}
					}
				},
				"then": {
					"$ref": "apoli/block_conditions/waterloggable.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:and",
								"origins:and"
							]
						}
					}
				},
				"then": {
					"$DONT_EXPORT": true,
					"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/apoli/meta_conditions/and.json",
					"type": "object",
					"required": [
						"type",
						"conditions"
					],
					"properties": {
						"type": {
							"description": "apoli:and\nChecks whether all of the provided conditions are fulfilled.\nBlock Condition Types operate on CachedBlockPosition, essentially a combination of World and BlockPos, which allows retrieving all necessary information about the block. These are available to power/condition types that provides a block_condition object field.",
							"markdownDescription": "### `apoli:and`\nChecks whether all of the provided conditions are fulfilled.\n## Block Condition Type\nBlock Condition Types operate on CachedBlockPosition, essentially a combination of World and BlockPos, which allows retrieving all necessary information about the block. These are available to power/condition types that provides a block_condition object field.\n\n[Block Condition Types Documentation](https://origins.readthedocs.io/en/latest/types/block_Condition_types/)",
							"$ignoreInvalidRef": true,
							"enum": [
								"apoli:and",
								"origins:and"
							]
						},
						"conditions": {
							"description": "All of these condition types have to be fulfilled in order for this condition to be fulfilled.",
							"type": "array",
							"items": {
								"$ref": "./block_condition.json"
							}
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:constant",
								"origins:constant"
							]
						}
					}
				},
				"then": {
					"$DONT_EXPORT": true,
					"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/apoli/meta_conditions/constant.json",
					"type": "object",
					"required": [
						"type",
						"value"
					],
					"properties": {
						"type": {
							"description": "apoli:constant\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\nBlock Condition Types operate on CachedBlockPosition, essentially a combination of World and BlockPos, which allows retrieving all necessary information about the block. These are available to power/condition types that provides a block_condition object field.",
							"markdownDescription": "### `apoli:constant`\nProvides a constant state where it's either true or false. Mainly added as a backup case in case a condition is required in some power/action/condition types.\n## Block Condition Type\nBlock Condition Types operate on CachedBlockPosition, essentially a combination of World and BlockPos, which allows retrieving all necessary information about the block. These are available to power/condition types that provides a block_condition object field.\n\n[Block Condition Types Documentation](https://origins.readthedocs.io/en/latest/types/block_Condition_types/)",
							"$ignoreInvalidRef": true,
							"enum": [
								"apoli:constant",
								"origins:constant"
							]
						},
						"value": {
							"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.",
							"type": "boolean"
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"enum": [
								"apoli:or",
								"origins:or"
							]
						}
					}
				},
				"then": {
					"$DONT_EXPORT": true,
					"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/apoli/meta_conditions/or.json",
					"type": "object",
					"required": [
						"type",
						"conditions"
					],
					"properties": {
						"type": {
							"description": "apoli:or\nChecks whether any (one or more) of the provided conditions are fulfilled.\nBlock Condition Types operate on CachedBlockPosition, essentially a combination of World and BlockPos, which allows retrieving all necessary information about the block. These are available to power/condition types that provides a block_condition object field.",
							"markdownDescription": "### `apoli:or`\nChecks whether any (one or more) of the provided conditions are fulfilled.\n## Block Condition Type\nBlock Condition Types operate on CachedBlockPosition, essentially a combination of World and BlockPos, which allows retrieving all necessary information about the block. These are available to power/condition types that provides a block_condition object field.\n\n[Block Condition Types Documentation](https://origins.readthedocs.io/en/latest/types/block_Condition_types/)",
							"$ignoreInvalidRef": true,
							"enum": [
								"apoli:or",
								"origins:or"
							]
						},
						"conditions": {
							"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.",
							"type": "array",
							"items": {
								"$ref": "./block_condition.json"
							}
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"const": "eggolib:chance"
						}
					}
				},
				"then": {
					"$id": "https://snavesutit.github.io/origins-mod-schemas/schemas/eggolib/meta_conditions/chance.json",
					"type": "object",
					"required": [
						"type"
					],
					"properties": {
						"type": {
							"description": "eggolib:chance\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\neggolib:chance\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\neggolib:chance\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\neggolib:chance\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\n$parentDescription",
							"markdownDescription": "### `eggolib:chance`\nGenerates a random value ranging from 0.0 to 1.0 and checks if it's less than the specified value.\nundefined",
							"$ignoreInvalidRef": true,
							"const": "eggolib:chance"
						},
						"chance": {
							"description": "The value to compare the generated random value to.",
							"type": "number"
						}
					},
					"dependantSchemas": {
						"type": {
							"required": [
								"chance"
							]
						}
					}
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"const": "extraorigins:fertilizable"
						}
					}
				},
				"then": {
					"$ref": "extraorigins/block_conditions/fertilizable.json"
				}
			},
			{
				"if": {
					"properties": {
						"type": {
							"const": "eggolib:air"
						}
					}
				},
				"then": {
					"$ref": "eggolib/block_conditions/air.json"
				}
			}
		]
	}
}